# -*- mode: ruby -*-
# vi: set ft=ruby :

  box = ENV["VAGRANT_BOX"] || "centos/7"
  provider = ENV['VAGRANT_PROVIDER'] || "virtualbox"
  xnat_ssh_user = ENV['XNAT_SSH_USER'] || "xnatadmin"
  xnat_ssh_user_password = ENV['XNAT_SSH_USER_PASSWORD'] || "xnatadmin_password"

  hosts = [
    {
      :name => "db",
      :box => box,
      :hostname => "db.xnat.local",
      :ip => "192.168.56.11",
      :synced_folders => [{
        :host_folder => "~/vagrant_storage/db/",
        :node_folder => "/storage",
      }],
      :modifyvm => false,
      :ansible_provision => false
    },
    {
      :name => "web",
      :box => box,
      :hostname => "web.xnat.local",
      :ip => "192.168.56.10",
      :synced_folders => [{
        :host_folder => "~/vagrant_storage/web/",
        :node_folder => "/storage",
      }],
      :modifyvm => false,
      :ansible_provision => false
    },
    {
      :name => "cserv",
      :box => box,
      :hostname => "cserv.xnat.local",
      :ip => "192.168.56.14",
      :synced_folders => [{
        :host_folder => "~/vagrant_storage/web/",
        :node_folder => "/storage/web",
      },
      {
        :host_folder => "~/vagrant_storage/cserv/",
        :node_folder => "/storage/cserv",
      }],
      :modifyvm => true,
      :ansible_provision => false
    },
    {
      :name => "external",
      :box => "generic/ubuntu1804",
      :hostname => "external.local",
      :ip => "192.168.56.101",
      :synced_folders => [{
        :host_folder => "~/vagrant_storage/external/",
        :node_folder => "/storage",
      }],
      :modifyvm => false,
      :ansible_provision => true
    },
  ]

  Vagrant.configure("2") do |config|

      config.hostmanager.enabled = true
      config.hostmanager.manage_host = true
      config.hostmanager.manage_guest = true

      hosts.each do |conf|
        config.vm.define conf[:name] do |node|
          node.vm.box = conf[:box]
          node.vm.network "private_network", ip: conf[:ip]
          node.vm.hostname = conf[:hostname]
          node.vbguest.installer_options = { allow_kernel_upgrade: true }
          node.vm.provider provider do |v|
            v.memory = 2048
            v.cpus = 1
            if provider != 'libvirt' and conf[:modifyvm]
              v.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
            end
          end

          if conf[:ansible_provision]
            node.vm.provision "ansible" do |ansible|
              ansible.playbook = "guest_scripts/playbook_external.yml"
              ansible.host_vars = {
              "external" => {"ansible_python_interpreter" => "/usr/bin/python3"}
              }
            end
          end
          # Add/remove fingerprint from known_hosts during vagrant up/vagrant destroy
          node.trigger.after :up do |trigger|
            trigger.warn = "Adding fingerprint for " + node.vm.hostname
            trigger.run = {inline: "ssh-keyscan -H " + node.vm.hostname + " >> ~/.ssh/known_hosts"}
          end
          node.trigger.before :destroy do |trigger|
            trigger.warn = "Removing fingerprint for " + node.vm.hostname
            trigger.run = {inline: "ssh-keygen -R " + node.vm.hostname}
          end
          node.vm.synced_folder ".", "/vagrant"
          conf[:synced_folders].each do |sf|
            node.vm.synced_folder sf[:host_folder], sf[:node_folder],
              type: "nfs",
              nfs_udp: false,
              linux__nfs_options: ["rw", "no_root_squash"],
              map_uid: 0,
              map_gid: 0,
              create: true
          end
          if %w[db web cserv].include? conf[:name]
            node.vm.provision :shell, path: "guest_scripts/vagrant_vm_startup.sh",
            env: {
              "WEB_CERTIFICATE_HOST" => node.vm.hostname,
              "XNAT_ADMIN" => xnat_ssh_user,
              "XNAT_ADMIN_PASSWORD" => xnat_ssh_user_password
            }
          end
        end
      end

      config.vagrant.plugins = ["vagrant-vbguest", "vagrant-docker-compose"]
    end
